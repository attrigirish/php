PHP : Hypertext Preprocessor

PHP is a server side scripting language. PHP is used to make dynamic web applications or web sites.

Setting up PHP Environment

1. PHP
2. Web Server (Apache, IIS, Weblogic, Tomcat)
3. Database Managment System (MySQL, Microsoft SQL Server, Oracle)


Default PHP Stack : PHP, Apache and MySQL


Installing PHP Stack on a Computer

1. Download or install PHP, Apache and MySQL.

or

1. Download and Install PHP Stacks E.g. WAMP or XAMPP or LAMP



Using XAMPP:

1. Open XAMPP Control Panel
2. To Start Apache -> Click on the Start button in front of 'Apache' service.
3. To Start MySQL -> Click on the Start button in front of 'Mysql' service.


Accessing Web Application or Web Pages using Apache Server.

localhost/directory/page


Server Directory

c:\xampp\htdocs



PHP

<?php
	statement(s)
?>



PHP Data Types
---------------

1. int          43,54
2. double       54.76,0.43
3. string       'Anil',"Anil"
4. boolean      true, false
5. array        array(43,54,65), array('name'=>'Girish')
6. objects



PHP Variable Declaration

PHP is a dynamically typed programming language. In PHP, you do not have to declare variables explicitly. The data type of variables is inferred automatically.

Syntax:

$<var-name>=value;

e.g.

$a=5;					//int
$a=5.5;					//double
$a='Anil';				//String
$a="Anil";				//String
$a=true;				//boolean
$a=array(1,2,3);		//array


PHP Operators

1. Arithmetic

A.	+
B.	-
C.	*
D.	/           5/2   =>  2.5
E.	%           5.2%2.5 	=> 0.2

Note: For int operands / operator does not yield an integer value, it will return a float instead. PHP % operator can operate on both int and float types.


2. Relational 

A. >			e.g.	5>2				true
B. <			e.g.	5<2				false
C. >=			e.g.	5>=5			true
D. <=			e.g.	5<=4			false
E. ==			e.g.	5==5			true
F. !=			e.g.	5!=3			true
6. ===          

e.g. (Exact Match)

  1=="1" 		#true
  1==="1"		#false


3. Logical 

A. &&   Logical AND 
		Returns true if all expressions are true else false

card.isvalid==true && pin==1234


B. ||	Logical OR
		Returns true if any expression is true else false

city=='Delhi' || city=='Mumbai' || city=='Chennai' || city=='Kolkata'


C. !	Logical NOT
		Returns the opposite of a boolean value.

!(city=='Delhi' || city=='Mumbai' || city=='Chennai' || city=='Kolkata')



4. Assignment 

A. 	= 	Assigns a value to a variable

e.g.

$a=5;

Questions: What is the difference between following expressions.

$a==5	 /		$a=5


5. Increment and Decrement 

A.	++		Increment
B.	--		Decrement

e.g.

$a=5;
$a=$a+1;		$a++;


$a=5;
$a--;


6. Text Operators

A. 	.		(Concatenation/Join)

"Hello"."World"			=	HelloWorld
"H".1 					=   H1



Key Points

Arithmetic Addition

$a=1;			//int
$b="2";			//string

$c=$a+$b;			3
$d="1"+"4";			5
$d="1"+"Hello";		1
$d="1"+"5Hello";	6


PHP Output Statement(s)

A. print
B. echo






Conditional Statements in PHP

1. if else
2. switch case
3. ? :


Conditional Statements

1. if.else
2. switch.case
3. ?.:



Syntax: if 

if(condition)
{
	//statements
}


Syntax: if.else

if(condition)
{
	//statements
}
else
{
	//statements
}


Syntax: if.else ladder

if(condition)
{
	statement(s)
}
elseif(condition)
{
	statement(s)
}
elseif(condition)
{
	statement(s)
}
else
{
	statement(s)
}


Syntax: switch.case

switch(value)
{
	case <exp-1>:
		statement(s)
		break;
	case <exp-2>:
		statement(s)
		break;
	default:
		statement(s)
		break;
}


E.g.

switch(day)
{
	case 1:
		//do-this
		break;
	case 2:
		//do-this
		break;
	case 3:
		//do-this
		break;
	case 4:
		//do-this
		break;
	case 5:
		//do-this
		break;
	case 6:
		//do-this
		break;
	case 7:
		//do-this
		break;
	defaut:
		//do-this
		break;
}


switch(choice)
{
	case "Entertainment":
		...
		break;
	case "Sports":
		...
		break;
	case "Politics":
		...
		break;
	case "News":
		...
		break;
}




Looping Statements in PHP

Looping Statements in PHP

1. for loop  (Counter Controlled Loop) : for loop is used when the no. of iterations are known in advance. A counter/iterator variable is used to control the no. of iterations. 

Syntax:

for(initialization;condition;updation)
{
	//Syntax
}

e.g.

for($i=1;$i<=10;$i++)
{
	//statements
}


2. while loop (Sentinel Controlled Loop) 


Sometimes, loop control may need to be based on the value of what we are processing. In this case, we would sentinel-controlled repetition. Sentinel-controlled repetition is sometimes called indefinite repetition because it is not known in advance how many times the loop will be executed. It is a repetition procedure for solving a problem by using a sentinel value (also called a signal value, a dummy value or a flag value) to indicate "end of data entry". The sentinel value itself is not a part of the processed data.


Syntx:

while(conditon)
{
	//statement(s)
}


while($record=mysqli_fetch_assoc($result))
{
}


3. do.while loop : 

do while loop is used when you have to execute the loop statement(s) atleast once.


Syntax:

do
{
	
}while(condition);




Arrays

An array is a collection of elements. PHP arrays are heterogeneous type data structures, i.e. PHP arrays can store values of any data types. PHP arrays are dynamic i.e. elements can be added to or removed from an element.

Types of Arrays

1. Indexed Arrays : In indexed array a numerical identifier called index is used to identify an element within the array. Array indexes always starts from 0.


Declaration:

	array(value1,value2,value3,...,valueN);
	or
	[value1,value2,value3,...,valueN];

	e.g

	$lst=array('Anil','Sunil','Ravi','Pankaj','Gaurav');
	or
	$lst=['Anil','Sunil','Ravi','Pankaj','Gaurav'];


	//Accessing Array Elements

	echo $lst[3];			//Pankaj


2. Associative Arrays : In associative array a string identifier or key is used to define an element in the array. Keys can be any alphanumeric values. Keys must be unique for all elements.


	array(key=>value,key=>value,....,key=>value);
	or
	[key=>value,key=>value,key=>value,key=>value];

	e.g.

	$lst=array('jan'=>31,'feb'=>28,'mar'=>31);

	//Accessing Array Elements

	echo $lst['jan'];		//31
	echo $lst['mar'];		//31
























